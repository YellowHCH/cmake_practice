 #include <iostream>
 #include <pthread.h>
 #include <stdio.h>
 //#include <thread>
 //#include <mutex>

 #include <dirent.h>
 #include <sys/types.h>
 #include <string.h>
 #include <string>
 #include <vector>
 #include <iterator>

// for multi process
#include <unistd.h>
#include <errno.h>
#include <stdlib.h>
#include <signal.h>
#include <sys/wait.h>

#include <boost/date_time/gregorian/gregorian.hpp>

int printDir(const char * dirname)
{
        ;
	// open dir fd
	DIR *dir = opendir(dirname);
	struct dirent *entry;
	int entry_cnt = 0;
	while( 0 != (entry = readdir(dir)) )
	  {
	    if( !strcmp(".", entry->d_name)  || !strcmp( ".." , entry->d_name) )
	      {
		continue;
	      }
	    ++entry_cnt;
	    printf("%d : entry name %s\n", entry_cnt, entry->d_name);
	  }

	printf("there are %d file(s) in %s dir\n", entry_cnt, dirname);
	closedir(dir);
	return 0;
}

std::vector<char *> getFilename(const char * dirname)
{
        ;
	std::vector<char *> res(0);
	DIR *dir = opendir(dirname);
	struct dirent *entry;
	int entry_cnt = 0;
	while( 0 != (entry = readdir(dir)) )
	  {
	    if( !strcmp(".", entry->d_name)  || !strcmp( ".." , entry->d_name) )
	      {
		continue;
	      }
	    ++entry_cnt;
	    //printf("%d : entry name %s\n", entry_cnt, entry->d_name);
	    res.push_back(entry->d_name);
	  }
	for(std::vector<char *>::iterator ite = res.begin(); ite != res.end(); ++ite)
	{
	  printf("filename : %s\n", *ite);
	}

	printf("there are %d file(s) in %s dir\n", entry_cnt, dirname);
	closedir(dir);
	return res;
}

struct PthreadStruct {
        ;
public:
  PthreadStruct(const char * dir) : dirname(dir)
  {}
  const char *dirname;
};

// pthread_mutex_lock(pthread_mutex_t *)
pthread_mutex_t  data_mutex;
int data;


void *pThreadFoo(void *param)
{
        ;
	PthreadStruct* p = (PthreadStruct *)param;
	for(int idx = 0; idx < 10; ++idx){
	  pthread_mutex_lock(&data_mutex);
	  ++data;
	  printf("this thread : %d,********************* data == %d\n", (int)pthread_self(), data);
	  printDir(p->dirname);
	  pthread_mutex_unlock(&data_mutex);
	}
	
}


//std::mutex data_mutex;
//int data = 0;

/*void pThreadFoo2(PthreadStruct *p)
{
        ;
	//PthreadStruct* p = (PthreadStruct *)param;
	for(int idx = 0; idx < 10; ++idx){
	  std::lock_guard<std::mutex> guard(data_mutex);
	  printDir(p->dirname);
	  ++data;
	  printf("in thread %d, data == %d\n", get_id(), data)
	}
}
*/

// process
static void sig_child(int signo)
{
        ;
	pid_t pid;
	int stat;
	while( (pid = waitpid(-1, &stat, WNOHANG)) > 0)
	  {
	    printf("child process %d terminated\n", pid);
	  }
}

int test_process()
{
        ;
	printf("begin test process\n");
	pid_t child_pid;
	// deal child terminated singal
	signal(SIGCHLD, sig_child);

	child_pid = fork();
	if( child_pid < 0){
	  printf("create child process failer\n");
	  return -1;
	}
	else if(child_pid == 0)
	  {
	    // for child process
	    printf("this is child process\n");
	    exit(0);
	  }
	else
	  {
	    // for parent process
	    printf("this is parent process\n");
	    sleep(1);
	    system("ps -o pid,ppid,state,tty,command");
	    //system("./test");
	  }
	return 0;
}

// write file
#include <iostream>
#include <fstream>
#include <ctime>

int write2file()
{
  ;
  printf("start write file\n");
  std::ofstream writeResp;
  writeResp.open("/root/tmp/logfile.log", std::ios::app);
  std::time_t t = std::time(0);
  
  writeResp << "current time : " << t << std::endl;
  return 0;
}

// time
#include <ctime>
#include <string>
int test_ctime()
{
  time_t tnow = time(0);
  tm *gmtm = gmtime(&tnow);
  char log[] = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
  snprintf(log, sizeof(log)-1, "year: %d mon: %02d day: %02d", gmtm->tm_year + 1900, gmtm->tm_mon + 1, gmtm->tm_mday);
  //std::cout << "year: " << gmtm->tm_year + 1900 << " mounth: " << (gmtm->tm_mon + 1) << " day: " << gmtm->tm_mday << std::endl;
  ;
  std::cout << log << std::endl;
  return 0;
}


int main()
{
        ;
	boost::gregorian::date d(boost::gregorian::day_clock::local_day());
	/*
	data = 0;
	const char dirname[] = "./mydir/";
	//printDir(dirname);
	freopen("log.txt", "w", stdout);
	// get file name
	std::vector<char *> files = getFilename(dirname);
	#if 0
	printf("start pthread...........\n");
	const int thread_num = 5;
	pthread_t tid[thread_num];
        PthreadStruct tParma(dirname);
	for(int i = 0; i < thread_num; ++i)
	{
	  int ret = pthread_create(&(tid[i]), NULL, pThreadFoo, (void *)(&tParma) );
	  if(0 != ret){ printf("thread creat failer\n"); }
	}
	//int ret = pthread_create(&tid, NULL, pThreadFoo, (void *)(&tParma) );
	//if(0 != ret){ printf("thread creat failer"); }

	void * status;
	for(int i = 0; i < thread_num; ++i)
	{
	  pthread_join(tid[i], &status);
	}
        //pthread_join(tid, &status);
	printf("wait for thread %d\n", tid);
	#endif

	*/
	// multi process
	#if 0
	int ret = test_process();
	#endif

	#if 0
	write2file();
	write2file();
	#endif
	// std thread
	//std::mutex data_mutex;
	//int data = 0;
	
	//std::thread t1(pThreadFoo2, &tParma);
	//std::thread t2(pThreadFoo2, &tParma);
	//t1.join();
	//t2.join();
	#if 1
	test_ctime();
	#endif

	
	//pthread_exit(NULL);
	return 0;
}
